template:
  select:
    - name: vacuum_speed
      state: >
        {% set fan_speed = state_attr('vacuum.mi_robot_vacuum', 'fan_speed') %}
        {{ 'Standard' if fan_speed == None else fan_speed }}
      options: >
        {% set fan_speed_list = state_attr('vacuum.mi_robot_vacuum', 'fan_speed_list') %}
        {{ ['Standard'] if fan_speed_list == None else fan_speed_list }}
      select_option:
        service: vacuum.set_fan_speed
        target:
          entity_id: vacuum.mi_robot_vacuum
        data:
          fan_speed: >
            {{ option }}

    - name: hdmi_bravia
      state: >
        {% set source = state_attr('media_player.lg_webos_smart_tv', 'source') %}
        {{ 'HDMI' if source == None else source }}
      options: >
        {% set source_list = state_attr('media_player.lg_webos_smart_tv', 'source_list') %}
        {{ ['HDMI'] if source_list == None else source_list }}
      select_option:
        service: media_player.select_source
        target:
          entity_id: media_player.lg_webos_smart_tv
        data:
          source: >
            {{ option }}

    # - name: hdmi_samsung
    #   state: >
    #     {% set source = state_attr('media_player.samsung_tv', 'source') %}
    #     {{ 'Apple' if source == None else source }}
    #   options: >
    #     {% set source_list = state_attr('media_player.samsung_tv', 'source_list') %}
    #     {{ ['Apple'] if source_list == None else source_list }}
    #   select_option:
    #     service: media_player.select_source
    #     target:
    #       entity_id: media_player.samsung_tv
    #     data:
    #       source: >
    #         {{ option }}

  binary_sensor:
    - unique_id: laundry_time_trigger
      state: >
        {% set start_time = state_attr('calendar.tvatta', 'start_time') %}
        {{ as_timestamp(start_time) - as_timestamp(now()) < 10 * 60 if start_time != None }}

    - unique_id: sidebar_update_color
      state: >
        {% set installed = states('sensor.hass_version_installed') %}
        {% set latest = states('sensor.hass_version_latest') 
        if not installed | regex_search('b') else states('sensor.hass_version_latest_beta') %}
        {{ (installed != latest and installed != 'unknown' and latest != 'unknown')
        or (states('sensor.hacs') != 'unknown' and states('sensor.hacs') | int(default=0) > 0) }}

    # - unique_id: imac_vpn
    #   device_class: connectivity
    #   icon: >
    #     mdi:shield-{{ 'alert' if is_state('switch.computer_imac', 'on') and 
    #     states('sensor.imac_ip') == states('sensor.myip') else 'check' }}
    #   state: >
    #     {{ is_state('switch.computer_imac', 'on') and 
    #     states('sensor.imac_ip') != states('sensor.myip') }}
    #   attributes:
    #     friendly_name: VPN

    # - unique_id: udm_internet
    #   icon: mdi:wan
    #   device_class: connectivity
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[4] | default }}
    #   attributes:
    #     friendly_name: Internet

    # - unique_id: udm_upgradable
    #   icon: mdi:update
    #   device_class: update
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[7] | default }}
    #   attributes:
    #     friendly_name: Uppdatering


  sensor:
    - unique_id: sidebar
      state: template
      attributes:
        time: >
          {% set hours = now().strftime('%H') %}
          {% set minutes = now().strftime('%M') %}
          <span class="time">
            {{ hours }}<span class="time-colon">:</span>{{ minutes }}
          </span>
        date: |
          <font color='#6a7377'><b>
          {%- if strptime(states('sensor.date'), '%Y-%m-%d').day != null %}
          {%- set days = ['שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת', 'ראשון'] %}
          {%- set months = ['ינואר', 'פברואר', 'מארס', 'אפריל', 'מאי', 'יוני', 
          'יולי', 'אוגוסט', 'ספטמבר', 'אוקטובר', 'נובמבר', 'דצמבר'] %}
            {{- days[now().weekday()] }}<br>
            {{- strptime(states('sensor.date'), '%Y-%m-%d').day }} {{ months[now().month-1] }}
          {%- endif -%}
          </b></font>
        greet: |
          <b>
          {%- set time = now().hour %}
          {%- if time <= 1 -%} לילה טוב {{'\U0001F611'}}
          {%- elif time <= 3 -%} לילה טוב {{'\U0001F62A'}}
          {%- elif time <= 5 -%} לילה טוב {{'\U0001F634'}}
          {%- elif time <= 7 -%} בוקר טוב {{'\U0001F4A9'}}
          {%- elif time <= 9 -%} בוקר טוב {{'\u2615\uFE0F'}}
          {%- elif time <= 10 -%} בוקר טוב {{'\U0001F642'}}
          {%- elif time <= 13 -%} יום טוב {{'\U0001F60A'}}
          {%- elif time <= 15 -%} יום טוב {{'\U0001F60E'}}
          {%- elif time <= 17 -%} יום טוב {{'\U0001F44B\U0001F3FB'}}
          {%- elif time <= 19 -%} ערב טוב {{'\U0001F44B\U0001F3FB'}}
          {%- elif time <= 22 -%} ערב טוב {{'\U0001F60C'}}
          {%- elif time <= 23 -%} ערב טוב {{'\U0001F974'}}
          {%- else %} ערב טוב {{'\U0001F974'}}
          {%- endif -%}
          </b>
        active: |
          <b>
          {%- set lights = [
            states.light.kitchen,
            states.light.closets,
            states.light.dining_room,
            states.light.door_light,
            states.light.garden,
            states.light.gateway_light,
            states.light.guests_bathroom,
            states.light.island,
            states.light.kids_shower_light,
            states.light.laundry_room_light,
            states.light.living_room,
            states.light.outdoor_light,
            states.light.parents_light_mirror,
            states.light.philips_1,
            states.light.philips_2,
            states.light.philips_toilet_lobby,
            states.light.shower_parents_light,
            states.light.sing_family,
            states.light.warehouse,
            states.light.yakir_room,
            states.light.liran_room, 
            states.light.rotem_room,
          ] %}

          {%- set switches = [
            states.switch.computer_imac,
            states.switch.playstation_5,
            states.switch.wemo_monitors,
            states.fan.studio_wemo,
            states.media_player.lg_webos_smart_tv
          ] %}

          {%- set media_players = [
            states.media_player.lg_webos_smart_tv
          ] %}

          {%- set lights_on = lights | selectattr('state','eq','on') | list %}
          {%- set lights_name = lights | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {%- set switches_on = switches | selectattr('state','eq','on') | list %}
          {%- set media_players_playing = media_players | selectattr('state','eq','playing') | list %}
          {%- set append = switches_on + media_players_playing %}
          {%- set switches_name = append | map(attribute='name') | join(', ') %}

          {%- if (lights_on | length == 0) and (switches_on | length > 0) -%}
            {{ switches_name | regex_replace(',([^,]*)$',' och\\1') }} פעילה

          {%- elif (lights_on | length == 1) and (switches_on | length == 1) -%}
            {{ lights_name }} ו, {{switches_name }} פעילים

          {%- elif (lights_on | length == 1) and (switches_on | length > 1) -%}
            {{ lights_name }}, {{ switches_name | regex_replace(',([^,]*)$',' och\\1') }} פעיל

          {%- elif (lights_on | length > 1) and (switches_on | length == 1) -%}
            {{ lights_on | length }} נורות ו, {{ switches_name }} פעילים

          {%- elif (lights_on | length > 1) and (switches_on | length > 1) -%}
            {{ lights_on | length }} נורות, {{ switches_name | regex_replace(',([^,]*)$',' och\\1') }} פעילים

          {%- elif (lights_on | length == 1) and (switches_on | length == 0) -%}
            {{ lights_name }} פעיל

          {%- elif (lights_on | length > 1) and (switches_on | length == 0) -%}
            {{ lights_on | length }} נורות פעילים

          {%- else %}
            <font color='#6a7377'>איזה יופי, הכל כבוי פחות חשמל</font>
          {%- endif -%}
          </b>
        # mailbox: |
        #   {% set mailbox = states('sensor.mailbox') %}
        #   {% if mailbox | int(default=0) > 0 %}
        #     {{ '\U0001F4EC' }} <font color='#6a7377'><b>Mailbox ({{ mailbox }})</b></font>
        #   {% endif %}

        vacuum: |
          {% set entity_id = 'vacuum.mi_robot_vacuum' %}
          {%- if is_state(entity_id, 'cleaning') -%}
            <b>השואב התחיל לשאוב</b>
          {%- elif is_state(entity_id, 'returning') -%}
            <b>השואב סיים</b>
          {%- endif %}
 
        switcher: |
          {% set entity_id = 'switch.switcher_mini' %}
          {%- if is_state(entity_id, 'on') -%}
            <b>הדוד חשמל - דולק</b>
          {%- elif is_state(entity_id, 'returning') -%}
            <b>הדוד חשמל - כבוי</b>
          {%- endif %}

        air_conditioner: |
          {% set entity_id = 'switch.sensibo_living_room_heat' %}
          {%- if is_state(entity_id, 'on') -%}
            <b>המזגן - דולק</b>
          {%- elif is_state(entity_id, 'returning') -%}
            <b>המזגן - כבוי</b>
          {%- endif %}          

        weather: |
          {%- set temperature = states('sensor.dark_sky_temperature') %}
          {%- set apparent = states('sensor.dark_sky_apparent_temperature') | round %}
          {%- set precip = states('sensor.dark_sky_precip_probability') | round %}
          {% if not is_state('sensor.dark_sky_temperature', 'לא ידוע') %}
            {%- if temperature | float(default=0) <= 0.0 -%}
              מרגיש כמו {{ apparent }}° עם {{ precip }}% אפשרות לגשם {{'\u2744\uFE0F'}}
            {%- elif temperature | float(default=0) > 0.0 -%} 
              מרגיש כמו {{ apparent}}° עם {{ precip }}% אפשרות לגשם {{ '\u2614\uFE0F' if precip > 30 }}
            {%- endif %}
          {%- else %}
            Unable to load weather information...
          {%- endif %}
       
        ###-- Add buy Avi --###
        ## Door Open ##
        alarm: |
          {%- set alarmsys = [
            states.binary_sensor.front_door_sensor,
            states.binary_sensor.bathroom_door_sensor,
          ] %}
        
          {%- set alarmsys_on = alarmsys | selectattr('state','eq','on') | list %}
          {%- set alarmsys_name = alarmsys | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}
          
          {%- if (alarmsys_on | length == 1) -%}
            {{ alarmsys_name }} פתוחה

          {%- elif (alarmsys_on | length > 1) -%}
            {{ alarmsys_on | length }} דלתות פתוחות

          {%- else %}
            <font color='#6a7377'>הכל סגור</font>
          {%- endif -%}

        # transport: |
        #   {{ states('sensor.skanetrafiken') }}
        # laundry: |
        #   {%- set start_time = state_attr('calendar.tvatta', 'start_time') %}
        #   {% if start_time != None %}
        #     {%- set time = as_timestamp(start_time) | timestamp_custom('%H:%M') %}
        #     {%- set hours = as_timestamp(start_time) | timestamp_custom('%H') | int(default=0) / 24 %}
        #     {%- set count = (as_timestamp(start_time) - as_timestamp(now())) / 86400 - hours %}
        #     {%- set day = strptime(start_time, '%Y-%m-%d %H:%M:%S').strftime('%A') 
        #     | replace('Monday', 'שני')
        #     | replace('Tuesday', 'שלישי')
        #     | replace('Wednesday', 'רביעי')
        #     | replace('Thursday', 'חמישי')
        #     | replace('Friday', 'שישי')
        #     | replace('Saturday', 'שבת')
        #     | replace('Sunday', 'ראשון') %}
        #     {%- if count <= 0.0 -%}
        #       {{'\U0001F4A6'}} Wash today {{ time }}
        #     {%- elif count <= 1.0 -%}
        #       Wash tomorrow at {{ time }}
        #     {%- elif count <= 2.0 -%}
        #       Wash the day after tomorrow at {{ time }}
        #     {%- else -%}
        #       Wash again {{ (count + hours) | round }} days on {{ day }} kl {{ time }}
        #     {%- endif %}
        #   {%- endif %}

        battery: |
          {% set entities = states.sensor
          |selectattr("entity_id", "search", "drums")
          |rejectattr("entity_id", "search", ".*indicator_led$")
          |map(attribute="entity_id")
          |list %}
          {%- for sensor in entities if states(sensor) | int(0) <= 30 and states(sensor) != 'unknown' %}
            {%- if loop.first %} {{-'\u26A0\uFE0F'}} Battery alarm: {% else %}, {% endif -%}
            {{ state_attr(sensor, 'friendly_name') + ' ' +  states(sensor) + '%' }}
          {%- endfor %}
 
        ###-- לוח שנה ---###
        # avi: | 
        #   {%- set start_time = state_attr('calendar.avi_abeksis', 'start_time') %}
        #   {%- set end_time = state_attr('calendar.avi_abeksis', 'end_time') %}
        #   {% if start_time != None %}
        #     {%- set time = as_timestamp(start_time) | timestamp_custom('%H:%M') %}
        #     {%- set time_end = as_timestamp(end_time) | timestamp_custom('%H:%M') %}
        #     {%- set hours = as_timestamp(start_time) | timestamp_custom('%H') | int(default=0) / 24 %}
        #     {%- set count = (as_timestamp(start_time) - as_timestamp(now())) / 86400 - hours %}
        #     {%- set day = strptime(start_time, '%Y-%m-%d %H:%M:%S').strftime('%A') 
        #     | replace('Monday', 'שני')
        #     | replace('Tuesday', 'שלישי')
        #     | replace('Wednesday', 'רביעי')
        #     | replace('Thursday', 'חמישי')
        #     | replace('Friday', 'שישי')
        #     | replace('Saturday', 'שבת')
        #     | replace('Sunday', 'ראשון') %}
        #     {%- if count <= 0.0 -%}
        #       {{'\U0001F6D2'}} Avi today between {{ time }}-{{ time_end }}
        #     {%- elif count <= 1.0 -%}
        #       Avi imorgon between {{ time }}-{{ time_end }}
        #     {%- elif count <= 2.0 -%}
        #       Avi the day after tomorrow between {{ time }}-{{ time_end }}
        #     {%- else -%}
        #       Avi if {{ (count + hours) | round }} days on {{ day }} between {{ time }}-{{ time_end }}
        #     {%- endif %}
        #   {%- endif %}

        plex: |
          {% if is_state('binary_sensor.plex_availability', 'off') -%}
            {{-'\u26A0\uFE0F'}} Plex is down...
          {%- endif %}
        nas: |
          {% if is_state('binary_sensor.nas_internet_access', 'off') -%}
            {{-'\u26A0\uFE0F'}} Check NAS Internet access
          {%- endif %}

    ###--- בדיקה שלי ---###
    # - unique_id: sidebar
    #   state: template
    #   attributes:
    #     friendly_name: HA Uptime
    #     value_template: >
    #       {% if states('sensor.uptime') == '0.0' %} 
    #         Just restarted...
    #       {% else %}
    #         {% macro phrase(value, name) %}
    #         {%- set value = value | int %}
    #         {%- set end = 's' if value > 1 else '' %}
    #         {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
    #         {%- endmacro %}
            
    #         {% set weeks = (states('sensor.uptime') | int / 7) | int %}
    #         {% set days = (states('sensor.uptime') | int) - (weeks * 7) %}
    #         {% set hours = (states('sensor.uptime') | float - states('sensor.uptime') | int) * 24 %}
    #         {% set minutes = (hours - hours | int) * 60 %}

    #         {{ [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') }}
    #       {% endif %}

    # - unique_id: updates
    #   state: template
    #   attributes:
        # esphome: >
        #   {% macro f(e) %}
        #     {{- device_attr(device_id('switch.' + e), 'sw_version') -}}
        #   {% endmacro %}
        #   {% set group = [f('gosund_1_switch'), f('gosund_2_switch'), f('gosund_3_switch')] | min %}
        #   {% set installed = group.split()[0] %}
        #   {% set latest = states('sensor.esphome_version_latest') %}
        #   {% set url = 'https://github.com/esphome/esphome/releases/latest' %}
        #   {% if installed != latest %}
        #     <b><a href="#" onclick="window.open('{{ url }}');">ESPHome</a></b> {{ installed + ' \u279e ' + latest }}
        #   {% endif %}

        ###--- play around with your playstation devices ---###
 
        # playactor: >
        #   {% set installed = states('sensor.playactor_version_installed') %}
        #   {% set latest = states('sensor.playactor_version_latest') %}
        #   {% set url = 'https://github.com/dhleong/playactor/releases/latest' %}
        #   {% if installed != latest %}
        #     <b><a href="#" onclick="window.open('{{ url }}');">playactor</a></b> {{ installed + ' \u279e ' + latest }}
        #   {% endif %}

        # kemperprofiler: >
        #   {% set installed = state_attr('sensor.kemper_version', 'profiler_installed') %}
        #   {% set latest = state_attr('sensor.kemper_version', 'profiler_latest') %}
        #   {% set url = 'https://www.kemper-amps.com/downloads' %}
        #   {% if installed != latest %}
        #     <b><a href="#" onclick="window.open('{{ url }}');">Kemper Profiler OS</a></b> {{ installed + ' \u279e ' + latest }}
        #   {% endif %}

        # rigmanager: >
        #   {% set installed = state_attr('sensor.kemper_version', 'rigmanager_installed') %}
        #   {% set latest = state_attr('sensor.kemper_version', 'rigmanager_latest') %}
        #   {% set url = 'https://www.kemper-amps.com/downloads' %}
        #   {% if installed != latest %}
        #     <b><a href="#" onclick="window.open('{{ url }}');">Rig Manager</a></b> {{ installed + ' \u279e ' + latest }}
        #   {% endif %}
          
        # unifi: >
        #   {% set installed = states('sensor.template_udm_version') %}
        #   {% set url = 'https://community.ui.com/releases?q=dream+machine' %}
        #   {% if is_state('binary_sensor.template_udm_upgradable', 'on') %}
        #     <b><a href="#" onclick="window.open('{{ url }}');">UniFi Dream Machine ({{ installed }})</a></b> uppdatering tillgänglig
        #   {% endif %}
        # synology: >
        #   {% set installed = device_attr(device_id('sensor.nas_volume_1_status'), 'sw_version').split(' ')[1] %}
        #   {% set latest = states('sensor.synology_dsm_latest') %}
        #   {% set url = 'https://www.synology.com/en-global/releaseNote/DSM' %}
        #   {% if is_state('binary_sensor.nas_update_available', 'on') %}
        #     <b><a href="#" onclick="window.open('{{ url }}');">Synology DSM</a></b> {{ installed + ' \u279e ' + latest }}
        #   {% endif %}

    # - unique_id: udm_cpu
    #   icon: mdi:chip
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[0] | default }}
    #   attributes:
    #     friendly_name: Processor

    # - unique_id: udm_cpu_temp
    #   icon: mdi:thermometer
    #   unit_of_measurement: '°C'
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[1] | default }}
    #   attributes:
    #     friendly_name: Processor Temperature

    # - unique_id: udm_mem
    #   icon: mdi:memory
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[2] | default }}
    #   attributes:
    #     friendly_name: Memory

    # - unique_id: udm_disk
    #   icon: mdi:harddisk
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[3] | default }}
    #   attributes:
    #     friendly_name: Storage

    # - unique_id: udm_uptime
    #   device_class: timestamp
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[5] | default }}
    #   attributes:
    #     friendly_name: Latest restart

    # - unique_id: udm_version
    #   icon: mdi:router-wireless
    #   state: >
    #     {{ states('sensor.udm_unifios').split('|\n')[6] | default }}
    #   attributes:
    #     friendly_name: Version

    # - unique_id: nas_status
    #   icon: custom:synology-nas
    #   state: >
    #     {% set entity_id = 'sensor.glances_mnt_disk1_used' %}
    #     {% if is_state(entity_id, 'normal') %}
    #       Bra
    #     {% elif is_state(entity_id, 'background') %}
    #       Verifierar
    #     {% else %}
    #       {{ states(entity_id) }}
    #     {% endif %}
    #   attributes:
    #     friendly_name: Systemhälsa

    - unique_id: hass_version
      icon: mdi:home-assistant
      state: >
        {{ 'Latest' if states('sensor.hass_version_installed') == 
        states('sensor.hass_version_latest') else states('sensor.hass_version_latest') }}
      attributes:
        friendly_name: >
          Installed {{ states('sensor.hass_version_installed') }}

    - unique_id: hass_dev_release
      icon: mdi:dev-to
      device_class: timestamp
      state: >
        {{ (as_timestamp(state_attr('calendar.home_assistant_devs', 'start_time')) 
        + 60*60*18) | timestamp_custom | replace(' ', 'T') }}
      attributes:
        friendly_name: >
          {% set release = state_attr('calendar.home_assistant_devs','message') %}
          {% if release == 'Home Assistant Core Beta Release' %}
            Next beta
          {% elif release == 'Home Assistant Core Release' %}
            Next release
          {% else %}
            {{ release }}
          {% endif %}

    - unique_id: hacs_version
      state: >
        {{ device_attr(device_id('sensor.hacs'), 'sw_version') }}

    # - unique_id: dockermon_mem
    #   icon: mdi:memory
    #   state: >
    #     {% set entity_id = 'sensor.docker_cpu' %}
    #     {{ (state_attr(entity_id, 'memory_stats')['usage'] / 
    #     state_attr(entity_id, 'memory_stats')['limit'] * 100) | round(1) | default(0) }}
    #   attributes:
    #     friendly_name: Memory

    # - unique_id: printer_status
    #   icon: mdi:printer-wireless
    #   state: >
    #     {% macro prt(state, translate) %}
    #     {{ translate if states('sensor.hp_deskjet_2600_series') == state }}
    #     {% endmacro %}
    #     {{ prt('On', 'På') }}
    #     {{ prt('Scanning', 'Skannar') }}
    #     {{ prt('Copying', 'Kopierar') }}
    #     {{ prt('Printing', 'Skriver ut') }}
    #     {{ prt('Cancelling Job', 'Avbryter') }}
    #     {{ prt('trayEmptyOrOpen', 'Inga papper') }}
    #     {{ prt('idle', 'Viloläge') }}
    #     {{ prt('Off', 'Av') }}
    #   attributes:
    #     friendly_name: Skrivare

    - unique_id: domain_counter
      state: >
        {{ states | count }}
      attributes:
        automation: >
          {{ states.automation | count }}
        binary_sensor: >
          {{ states.binary_sensor | count }}
        device_tracker: >
          {{ states.device_tracker | count }}
        light: >
          {{ states.light | count }}
        media_player: >
          {{ states.media_player | count }}
        sensor: >
          {{ states.sensor | count }}
        switch: >
          {{ states.switch | count }}
        other: >
          {{ states.calendar | count +
          states.camera | count +
          states.climate | count +
          states.fan | count +
          states.input_boolean | count +
          states.input_number | count +
          states.input_select | count +
          states.lock | count +
          states.person | count +
          states.remote | count +
          states.scene | count +
          states.script | count +
          states.select | count +
          states.sun | count +
          states.timer | count +
          states.vacuum | count +
          states.weather | count +
          states.zone | count }}

    ###-- Vacuum --###
    - unique_id: vacuum_filter
      icon: custom:roborock-filter
      unit_of_measurement: '%'
      state: >
        {{ (states('sensor.mi_robot_vacuum_filter_left') | int(default=0) / 5400) | int(default=0) }}
      attributes:
        friendly_name: Filter

    - unique_id: vacuum_mainbrush
      icon: custom:roborock-mainbrush
      unit_of_measurement: '%'
      state: >
        {{ (states('sensor.mi_robot_vacuum_main_brush_left') | int(default=0) / 10800) | int(default=0) }}
      attributes:
        friendly_name: Head Brush

    - unique_id: vacuum_sensors
      icon: custom:roborock-sensor
      unit_of_measurement: '%'
      state: >
        {{ (states('sensor.mi_robot_vacuum_sensor_dirty_left') | int(default=0) / 1080) | int(default=0) }}
      attributes:
        friendly_name: Sensors

    - unique_id: vacuum_sidebrush
      icon: custom:roborock-sidebrush
      unit_of_measurement: '%'
      state: >
        {{ (states('sensor.mi_robot_vacuum_side_brush_left') | int(default=0) / 7200) | int(default=0) }}
      attributes:
        friendly_name: Side brush 

    ###-- Fully kiosk --###

    # - unique_id: fullykiosk_storage
    #   icon: mdi:sd
    #   unit_of_measurement: '%'
    #   state: >
    #     {% set FreeSpace = states('sensor.galaxy_tab_a_internal_storage_free_space') | float(default=0) %}
    #     {% set TotalSpace = states('sensor.galaxy_tab_a_internal_storage_total_space') | float(default=0) %}
    #     {% if not (FreeSpace == 0.0 or TotalSpace == 0.0) %}
    #       {{ 100 - (FreeSpace / TotalSpace * 100) | int(default=0) }}
    #     {% endif %}
    #   attributes:
    #     friendly_name: Storage

    # - unique_id: fullykiosk_memory
    #   icon: mdi:memory
    #   unit_of_measurement: '%'
    #   state: >
    #     {% set FreeMemory = states('sensor.galaxy_tab_a_ram_free_memory') | float(default=0) %}
    #     {% set TotalMemory = states('sensor.galaxy_tab_a_ram_total_memory') | float(default=0) %}
    #     {% if not (FreeMemory == 0.0 or TotalMemory == 0.0) %}
    #       {{ 100 - (FreeMemory / TotalMemory * 100) | int(default=0) }}
    #     {% endif %}
    #   attributes:
    #     friendly_name: Memory

    # - unique_id: fullykiosk_last_app_start
    #   icon: mdi:update
    #   device_class: timestamp
    #   state: >
    #     {{ states('sensor.tablet_last_app_start') | replace(' ', 'T') }}
    #   attributes:
    #     friendly_name: Last restart

     ##-- Battery Level --##
    # - unique_id: hue_motion_battery_parents_bathroom
    #   device_class: battery
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ state_attr('binary_sensor.shower_parents_motion', 'battery_level') }}
    #   attributes:
    #     friendly_name: Sensor Shower Parents Bathroom

    # - unique_id: hue_motion_battery_hall
    #   device_class: battery
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ state_attr('binary_sensor.sensor_hall_motion', 'battery_level') }}
    #   attributes:
    #     friendly_name: Sensor Hall

    # - unique_id: hue_motion_battery_garderob
    #   device_class: battery
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ state_attr('binary_sensor.sensor_garderob_motion', 'battery_level') }}
    #   attributes:
    #     friendly_name: Sensor Garderob
